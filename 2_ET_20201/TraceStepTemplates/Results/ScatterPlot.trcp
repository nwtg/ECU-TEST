<?xml version="1.0" encoding="utf-8"?>
<TRACE-STEP-PROTOTYPE format-rev="1" uuid="799977ee1ca411e0887d0024d7351970" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="trcpEventPythonII">
	<DESCRIPTION xsi:type="unicode">Creates a scatter plot of the given signals (y1 over x1).</DESCRIPTION>
	<SIGNALS xsi:type="trcpParameterDescriptionList">
		<PARAMETER uuid="994b10cf1ca511e09d430024d7351970" xsi:type="signalDescription">
			<NAME xsi:type="unicode">x1</NAME>
			<EVENT-TYPE xsi:type="string">PHY</EVENT-TYPE>
		</PARAMETER>
		<PARAMETER uuid="996c546e1ca511e081c60024d7351970" xsi:type="signalDescription">
			<NAME xsi:type="unicode">y1</NAME>
			<EVENT-TYPE xsi:type="string">PHY</EVENT-TYPE>
		</PARAMETER>
	</SIGNALS>
	<PARAMETERS xsi:type="trcpParameterDescriptionList">
		<PARAMETER uuid="eb496800726711e1bd7c2c4138042c68" xsi:type="parameterDescription">
			<NAME xsi:type="unicode">lineStyle</NAME>
			<DESCRIPTION xsi:type="unicode">string containing styles used for signal plot:
' ' no line,
'-' solid line style,
'=' dashed line style, 
'|' dash-dot line style, 
':' dotted line style</DESCRIPTION>
			<PARAMETER-TYPE xsi:type="string">STRING</PARAMETER-TYPE>
		</PARAMETER>
		<PARAMETER uuid="c13c1111726811e1a4672c4138042c68" xsi:type="parameterDescription">
			<NAME xsi:type="unicode">markerStyle</NAME>
			<DESCRIPTION xsi:type="unicode">strin containing markers for signal plots:
' ' no marker,
'.' point marker, 
',' pixel marker, 
'o' circle marker, 
'v' triangle_down marker, 
'^' triangle_up marker, 
'&lt;' triangle_left marker, 
'&gt;' triangle_right marker,
'1' tri_down marker, 
'2' tri_up marker, 
'3' tri_left marker, 
'4' tri_right marker, 
's' square marker, 
'p' pentagon marker, 
'*' star marker, 
'h' hexagon1 marker, 
'H' hexagon2 marker, 
'+' plus marker, 
'x' x marker, 
'D' diamond marker, 
'd' thin_diamond marker, 
'|' vline marker, 
'_' hline marker</DESCRIPTION>
			<PARAMETER-TYPE xsi:type="string">STRING</PARAMETER-TYPE>
		</PARAMETER>
		<PARAMETER uuid="e7ba0a40726811e1bc0d2c4138042c68" xsi:type="parameterDescription">
			<NAME xsi:type="unicode">lineColor</NAME>
			<DESCRIPTION xsi:type="unicode">string containing colors used for signal plot:
'b' blue, 
'g' green, 
'r' red, 
'c' cyan, 
'm' magenta, 
'y' yellow, 
'k' black, 
'w' white</DESCRIPTION>
			<PARAMETER-TYPE xsi:type="string">STRING</PARAMETER-TYPE>
		</PARAMETER>
		<PARAMETER uuid="4a16084074eb11e1a0b02c4138042c68" xsi:type="parameterDescription">
			<NAME xsi:type="unicode">xLabel</NAME>
			<DESCRIPTION xsi:type="unicode">The label for x axis.</DESCRIPTION>
			<PARAMETER-TYPE xsi:type="string">STRING</PARAMETER-TYPE>
		</PARAMETER>
		<PARAMETER uuid="54c356cf74eb11e192682c4138042c68" xsi:type="parameterDescription">
			<NAME xsi:type="unicode">yLabel</NAME>
			<DESCRIPTION xsi:type="unicode">The label for the y axis.</DESCRIPTION>
			<PARAMETER-TYPE xsi:type="string">STRING</PARAMETER-TYPE>
		</PARAMETER>
	</PARAMETERS>
	<INIT-FUNCTION xsi:type="pyFunctionII">
		<NAME xsi:type="unicode">Init</NAME>
		<PARAMETER-NAMES/>
		<CODE xsi:type="pyCode">
			<SOURCE xsi:type="unicode">#Head of function is generated, do not edit!
def Init(dataContainer, parameters, report):
    
    import matplotlib
    if matplotlib.get_backend() != &quot;agg&quot;:
        matplotlib.use(&quot;agg&quot;)
    
    dataContainer.xValues = []
    dataContainer.yValues = []
</SOURCE>
		</CODE>
	</INIT-FUNCTION>
	<FINALIZE-FUNCTION xsi:type="pyFunctionII">
		<NAME xsi:type="unicode">Finalize</NAME>
		<PARAMETER-NAMES/>
		<CODE xsi:type="pyCode">
			<SOURCE xsi:type="unicode">#Head of function is generated, do not edit!
def Finalize(dataContainer, parameters, report):
    from matplotlib import pyplot
    import os
    pyplot.clf()
       
    pyplot.figure(1)
    
    minX = float('inf')
    maxX = float('-inf')
    
    lineStyleCount = len(parameters['lineStyle']) if parameters['lineStyle'] else 0
    lineColorCount = len(parameters['lineColor']) if parameters['lineColor'] else 0
    markerStyleCount = len(parameters['markerStyle']) if parameters['markerStyle'] else 0

    formatString = ''

    if lineColorCount &gt; 0:
        # start over if end of color specification is reached
        # take white space as missing color specification
        formatString += parameters['lineColor'][1 % lineColorCount].strip()

    if lineStyleCount &gt; 0:
        # start over if end of style specification is reached
        formatString += parameters['lineStyle'][1 % lineStyleCount].replace('=', '--').replace('|', '-.')
    
    if markerStyleCount &gt; 0:
        # start over if end of style specification is reached
        # take white space as missing style specification
        formatString += parameters['markerStyle'][1 % markerStyleCount].strip()

    xValues = dataContainer.xValues
                                
    pyplot.plot(xValues, dataContainer.yValues, formatString)
    
    minX = min(minX, min(xValues))
    maxX = max(maxX, max(xValues))
    
    pyplot.xlim(minX, maxX)
        
    minY, maxY = pyplot.ylim()
    margin = (maxY - minY) * 0.1
    pyplot.ylim(minY-margin, maxY+margin)        
    
    if parameters['xLabel']:
        pyplot.xlabel(parameters['xLabel'])
        
    if parameters['yLabel']:
        pyplot.ylabel(parameters['yLabel'])
    
    imagePath = os.path.join(os.getenv(&quot;temp&quot;), &quot;img01.png&quot;)
    
    scaleFactor = 1.0
    pyplot.savefig(imagePath, dpi=100*scaleFactor)
    dataContainer.ReportImage(imagePath)
</SOURCE>
		</CODE>
	</FINALIZE-FUNCTION>
	<FUNCTIONS>
		<ELEMENT xsi:type="pyEventFunctionII">
			<NAME xsi:type="unicode">OnSignal</NAME>
			<PARAMETER-NAMES/>
			<CODE xsi:type="pyCode">
				<SOURCE xsi:type="unicode">#Head of function is generated, do not edit!
def OnSignal(event, hold, dataContainer, parameters, report):

    dataContainer.xValues.append(event.GetValue('x1'))
    dataContainer.yValues.append(event.GetValue('y1'))
</SOURCE>
			</CODE>
			<SIGNAL-NAMES>
				<ELEMENT xsi:type="unicode">x1</ELEMENT>
				<ELEMENT xsi:type="unicode">y1</ELEMENT>
			</SIGNAL-NAMES>
		</ELEMENT>
	</FUNCTIONS>
</TRACE-STEP-PROTOTYPE>
