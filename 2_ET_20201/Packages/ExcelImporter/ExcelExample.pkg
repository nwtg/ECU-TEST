<?xml version="1.0" encoding="utf-8"?>
<PACKAGE format-rev="4" prog-version="6.6-TRUNK" xmlns="http://www.tracetronic.de/xml/ecu-test" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.tracetronic.de/xml/ecu-test package.xsd">
	<INFORMATION xsi:type="packageInfo">
		<DESCRIPTION xsi:type="string"/>
		<VERSION xsi:type="string"/>
		<ALTERNATE-CALL-REPRESENTATION-ACTION-FIELD-TEMPLATE xsi:type="string"/>
		<ALTERNATE-CALL-REPRESENTATION-EXPECTATION-FIELD-TEMPLATE xsi:type="string"/>
	</INFORMATION>
	<VARIABLES xsi:type="variableContainer">
		<VARIABLE format-rev="1" xsi:type="variable">
			<NAME xsi:type="string">ExcelFileName</NAME>
			<DESCRIPTION xsi:type="string">Absolute path to an existing EXCEL file</DESCRIPTION>
			<DEFAULT-VALUE format-rev="1" xsi:type="value">
				<COMPLEX-DATA xsi:type="I18NItem">
					<MULTILANGDATA>
						<ELEMENT dkey="de_DE">
							<DVALUE xsi:type="string">c:\Temp\MatrixValues.xlsx</DVALUE>
						</ELEMENT>
						<ELEMENT dkey="en_US">
							<DVALUE xsi:type="string">MatrixValues.xlsx</DVALUE>
						</ELEMENT>
					</MULTILANGDATA>
					<INITIAL-LANGUAGE xsi:type="string">de_DE</INITIAL-LANGUAGE>
				</COMPLEX-DATA>
			</DEFAULT-VALUE>
		</VARIABLE>
		<VARIABLE format-rev="1" xsi:type="variable">
			<NAME xsi:type="string">ExcelWorkSheetName</NAME>
			<DESCRIPTION xsi:type="string">Worksheet name</DESCRIPTION>
			<DEFAULT-VALUE format-rev="1" xsi:type="value">
				<COMPLEX-DATA xsi:type="I18NItem">
					<MULTILANGDATA>
						<ELEMENT dkey="de_DE">
							<DVALUE xsi:type="string">Sheet1</DVALUE>
						</ELEMENT>
					</MULTILANGDATA>
					<INITIAL-LANGUAGE xsi:type="string">de_DE</INITIAL-LANGUAGE>
				</COMPLEX-DATA>
			</DEFAULT-VALUE>
		</VARIABLE>
		<VARIABLE format-rev="1" xsi:type="variable">
			<NAME xsi:type="string">readMatrixFromExcel</NAME>
			<DESCRIPTION xsi:type="string">Reads matrix values from EXCEL worksheet</DESCRIPTION>
			<DEFAULT-VALUE xsi:type="function">
				<CODE xsi:type="string">import os
from openpyxl import load_workbook
from openpyxl.styles import Side, Border
from lib.common.dataStructures.Matrix import SparseMatrix
    
# function must be named 'func'    
def func(fileName, workSheetName):
    filePath = os.path.join(api.GetSetting('parameterPath'), fileName)    
    wb = load_workbook(filePath)
    sheet = wb[workSheetName]
    matrix = SparseMatrix(sheet.max_column,sheet.max_row)
    for column in range(matrix.GetXDimension()):
        for row in range(matrix.GetYDimension()):
            value = sheet.cell(column=column+1, row=row+1).value
            matrix.SetValue(column, row, value if value else 0)
            
    _CreateTableBorder(sheet, &quot;A1:{}&quot;.format(sheet.cell(row=sheet.max_row,column=sheet.max_column).coordinate))
    wb.save(filename = filePath)
    return matrix

def _CreateTableBorder(sheet, cell_range):
    innerSide = Side(style=&quot;thin&quot;, color=&quot;000000&quot;)
    outerSide = Side(style='thick', color=&quot;000000&quot;)
    top = Border(top=outerSide, bottom=innerSide, left=innerSide, right=innerSide)
    left = Border(top=innerSide, bottom=innerSide, left=outerSide, right=innerSide)
    right = Border(top=innerSide, bottom=innerSide, left=innerSide, right=outerSide)
    bottom = Border(top=innerSide, bottom=outerSide, left=innerSide, right=innerSide)
    rows = list(sheet[cell_range])

    for row in rows[1:-1]:
        for cell in row[1:-1]:
            cell.border = Border(top=innerSide, bottom=innerSide, left=innerSide, right=innerSide)

    for cell in rows[0]:
        cell.border = top
    for cell in rows[-1]:
        cell.border = bottom

    for row in rows:
        l = row[0]
        r = row[-1]
        l.border = left
        r.border = right

    rows[0][0].border = Border(top=outerSide, bottom=innerSide, left=outerSide, right=innerSide)
    rows[-1][0].border = Border(top=innerSide, bottom=outerSide, left=outerSide, right=innerSide)
    rows[0][-1].border = Border(top=outerSide, bottom=innerSide, left=innerSide, right=outerSide)
    rows[-1][-1].border = Border(top=innerSide, bottom=outerSide, left=innerSide, right=outerSide)
</CODE>
			</DEFAULT-VALUE>
		</VARIABLE>
		<VARIABLE format-rev="1" xsi:type="variable">
			<NAME xsi:type="string">writeMatrixSumToExcel</NAME>
			<DESCRIPTION xsi:type="string">Writes values to EXCEL worksheet</DESCRIPTION>
			<DEFAULT-VALUE xsi:type="function">
				<CODE xsi:type="string">import os
from openpyxl import load_workbook

# function must be named 'func'
def func(matrix, fileName, worksheetName):
    filePath = os.path.join(api.GetSetting('parameterPath'), fileName)
    wb = load_workbook(filePath)
    sheet = wb[worksheetName]
    sumCol = []
    for column in range(matrix.GetXDimension()):  
        sumCol.append(0)
        
    for row in range(matrix.GetYDimension()):
        sumRow = 0
        for column in range(matrix.GetXDimension()):
            value = matrix.GetValue(column, row)
            sumRow += value
            sumCol[column] += value           
        sheet.cell(row=row+1, column=matrix.GetXDimension() + 1, value=sumRow)
        
    for column in range(matrix.GetXDimension()):        
        sheet.cell(column=column+1, row=matrix.GetYDimension()+1, value=sumCol[column])
        
    wb.save(filename = filePath)
</CODE>
			</DEFAULT-VALUE>
		</VARIABLE>
		<VARIABLE format-rev="1" xsi:type="variable">
			<NAME xsi:type="string">actual</NAME>
			<DESCRIPTION xsi:type="string">Matrix read from Excel file</DESCRIPTION>
			<DEFAULT-VALUE xsi:type="undefined"/>
		</VARIABLE>
		<VARIABLE format-rev="1" xsi:type="variable">
			<NAME xsi:type="string">printMatrix</NAME>
			<DESCRIPTION xsi:type="string"/>
			<DEFAULT-VALUE xsi:type="function">
				<CODE xsi:type="string">
#function must be named 'func'

def func(matrix):
    rows = []
    for r in range(matrix.GetYDimension()):
        row = []
        for c in range(matrix.GetXDimension()):
            row.append(str(matrix.GetValue(c, r)))
        rows.append('; '.join(row))
    return '\n'.join(rows)

</CODE>
			</DEFAULT-VALUE>
		</VARIABLE>
	</VARIABLES>
	<MAPPING format-rev="1" xsi:type="mappingSpace"/>
	<TESTSTEPS xsi:type="testCase">
		<TESTSTEP format-rev="3" id="180" name="TsCalculation" xsi:type="utility-4115fa00-5f3c-11df-8a53-001c233b3528">
			<VARIABLE-REFS>
				<VARIABLE-NAME dkey="default">
					<DVALUE xsi:type="string">actual</DVALUE>
				</VARIABLE-NAME>
			</VARIABLE-REFS>
			<FORMULA xsi:type="functionBaseExpression">
				<COMPONENT xsi:type="varBaseExpression">
					<NAME xsi:type="string">readMatrixFromExcel</NAME>
				</COMPONENT>
				<ARGUMENTS>
					<ARGUMENT xsi:type="varBaseExpression">
						<NAME xsi:type="string">ExcelFileName</NAME>
					</ARGUMENT>
					<ARGUMENT xsi:type="varBaseExpression">
						<NAME xsi:type="string">ExcelWorkSheetName</NAME>
					</ARGUMENT>
				</ARGUMENTS>
			</FORMULA>
		</TESTSTEP>
		<TESTSTEP format-rev="3" id="219" name="TsCalculation" xsi:type="utility-4115fa00-5f3c-11df-8a53-001c233b3528">
			<FORMULA xsi:type="functionBaseExpression">
				<COMPONENT xsi:type="varBaseExpression">
					<NAME xsi:type="string">printMatrix</NAME>
				</COMPONENT>
				<ARGUMENTS>
					<ARGUMENT xsi:type="varBaseExpression">
						<NAME xsi:type="string">actual</NAME>
					</ARGUMENT>
				</ARGUMENTS>
			</FORMULA>
		</TESTSTEP>
		<TESTSTEP format-rev="3" id="113" name="TsCalculation" xsi:type="utility-4115fa00-5f3c-11df-8a53-001c233b3528">
			<FORMULA xsi:type="functionBaseExpression">
				<COMPONENT xsi:type="varBaseExpression">
					<NAME xsi:type="string">writeMatrixSumToExcel</NAME>
				</COMPONENT>
				<ARGUMENTS>
					<ARGUMENT xsi:type="varBaseExpression">
						<NAME xsi:type="string">actual</NAME>
					</ARGUMENT>
					<ARGUMENT xsi:type="varBaseExpression">
						<NAME xsi:type="string">ExcelFileName</NAME>
					</ARGUMENT>
					<ARGUMENT xsi:type="varBaseExpression">
						<NAME xsi:type="string">ExcelWorkSheetName</NAME>
					</ARGUMENT>
				</ARGUMENTS>
			</FORMULA>
		</TESTSTEP>
	</TESTSTEPS>
</PACKAGE>
